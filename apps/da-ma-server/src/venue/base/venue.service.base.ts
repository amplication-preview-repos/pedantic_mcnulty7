/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Venue as PrismaVenue,
  Event as PrismaEvent,
} from "@prisma/client";

export class VenueServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.VenueCountArgs, "select">): Promise<number> {
    return this.prisma.venue.count(args);
  }

  async venues<T extends Prisma.VenueFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.VenueFindManyArgs>
  ): Promise<PrismaVenue[]> {
    return this.prisma.venue.findMany<Prisma.VenueFindManyArgs>(args);
  }
  async venue<T extends Prisma.VenueFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.VenueFindUniqueArgs>
  ): Promise<PrismaVenue | null> {
    return this.prisma.venue.findUnique(args);
  }
  async createVenue<T extends Prisma.VenueCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.VenueCreateArgs>
  ): Promise<PrismaVenue> {
    return this.prisma.venue.create<T>(args);
  }
  async updateVenue<T extends Prisma.VenueUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.VenueUpdateArgs>
  ): Promise<PrismaVenue> {
    return this.prisma.venue.update<T>(args);
  }
  async deleteVenue<T extends Prisma.VenueDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.VenueDeleteArgs>
  ): Promise<PrismaVenue> {
    return this.prisma.venue.delete(args);
  }

  async findEvents(
    parentId: string,
    args: Prisma.EventFindManyArgs
  ): Promise<PrismaEvent[]> {
    return this.prisma.venue
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .events(args);
  }
}
